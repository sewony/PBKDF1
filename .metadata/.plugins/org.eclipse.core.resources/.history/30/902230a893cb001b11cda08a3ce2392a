import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.security.MessageDigest;
import java.security.Security;
import java.io.FileNotFoundException;
import javax.crypto.Cipher;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
//import java.security.Provider;
import org.bouncycastle.jce.provider.BouncyCastleProvider;

public class Main {

	public static void main(String[] args) throws Exception, FileNotFoundException{
		// TODO Auto-generated method stub
		byte[] Salt= {0x78,0x57,(byte)0x8E, 0x5A, 0x5D, 0x63, (byte)0xCB, 0x06};
	    InputStream in = System.in;
	    InputStreamReader reader= new InputStreamReader(in);
	    BufferedReader br = new BufferedReader(reader);
	    
	    String Mode="";
	    String Password="";			
		String Filepath="";//FileInputStream으로 받아야하나?
		String o_path = ""; //o_path 나중에 지정해줘야 할 듯
		String decpath =""; 
		
		System.out.print("Mode: ");
		Mode=br.readLine();
		System.out.print("password: ");
		Password=br.readLine();
		System.out.print("path: ");
		Filepath=br.readLine();
		System.out.print("o_path: ");
		o_path=br.readLine();
		System.out.print("decpath: ");
		decpath=br.readLine();
		
		byte[]derivedKey=KeyGeneration(Password, Salt, 16, 1000);//입력한 password를 기반으로 키 생성
		if(Mode.equals("Enc")) {//Enc 입력시 파일암호화 시작
			FileEnc(Salt, derivedKey, Filepath, o_path);
		}
		else if(Mode.equals("Dec")) {//Dec 입력시 password를 체크하고 맞다면 복호화 시작
			FileDec(Salt, derivedKey, o_path, decpath);
			}
		}
	
static byte[] KeyGeneration(String password, byte[]salt, int dkLen, int iteration)throws Exception {
		
		Security.addProvider(new BouncyCastleProvider());
		MessageDigest md= MessageDigest.getInstance("SHA1","BC");
		byte[] input= new byte[password.length()+salt.length];
		
		System.arraycopy(Utils.toByteArray(password), 0, input, 0, password.length());
		System.arraycopy(salt, 0/*salt복사시작위치*/, input/*복사해서넣는곳*/, password.length()/*복사시작위치*/, salt.length/*이만큼복사*/);
		
		System.out.println("Input : "+Utils.toHexString(input));
		
		md.update(input);
		
		for(int i=0;i<iteration-1;i++) {
			byte T[]=md.digest();
			md.update(T);
		}
		byte output[]=md.digest();
		byte[] derivedKey=new byte[16];
		
		System.arraycopy(output, 0, derivedKey, 0, dkLen);
		
		System.out.println("derivedKey : "+Utils.toHexString(derivedKey));
		return derivedKey;
	}

	static void FileEnc(byte[] salt, byte[] DerivedKey, String Path, String o_Path)throws Exception{
	//Security.addProvider(new BouncyCastleProvider());
		System.out.println("check!");
		byte[]	ivBytes=new byte[] {
			0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00,
			0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00};
		
		SecretKeySpec key= new SecretKeySpec(DerivedKey, "AES");
		IvParameterSpec iv= new IvParameterSpec(ivBytes);
		
	Cipher cipher=null;
	cipher=Cipher.getInstance("AES/CBC/PKCS7Padding", "BC");
	cipher.init(Cipher.ENCRYPT_MODE, key, iv);//암호화 모드로 initialization 
		byte[] password_check=new byte[16];
		byte[] password_check_out=new byte[24];
	
	System.arraycopy(DerivedKey, 0, password_check_out, 0, DerivedKey.length);//password_check_out에 derivedKey값 복사
	System.arraycopy(salt, 0, password_check_out, 16, salt.length);//password_check_out에 salt값 복사
	MessageDigest hash= MessageDigest.getInstance("SHA1", "BC");
	
	password_check_out=hash.digest(password_check_out);
	System.arraycopy(password_check_out, 0, password_check, 0, 16);
	System.out.println("password_check: "+Utils.toHexString(password_check));
	FileInputStream Inputstream= new FileInputStream(Path);//Inputstream 객체생성
	FileOutputStream Outputstream= new FileOutputStream(o_Path);//Outputstream 객체생성
	
	Outputstream.write(salt);//salt를 Outputstream 객체에 넣는다.
	Outputstream.write(password_check);//password_check값을 Outputstream 객체에 넣는다.
	
		int BUF_SIZE=1024;
		byte[] buffer= new byte[BUF_SIZE];  
	
		int read=BUF_SIZE;
		
	while((read=Inputstream.read(buffer,0,BUF_SIZE))==BUF_SIZE) {
		Outputstream.write(cipher.update(buffer,0,read));
	}
	Outputstream.write(cipher.doFinal(buffer,0,read));
	
	Inputstream.close();
	Outputstream.close();
	  }

	static void FileDec(byte[] salt2, byte[] DerivedKey2, String o_Path2, String dec_path) throws Exception {
	
	byte[]		ivBytes=new byte[] {
			0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00,
			0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00};
		
	byte[] 	password_check=new byte[16];
	byte[] 	password_check_out=new byte[24];
	byte[] 	password_checkd=new byte[16];
	byte[] 	password_check_outd=new byte[24];
	
		SecretKeySpec key = new SecretKeySpec(DerivedKey2, "AES");
		IvParameterSpec iv= new IvParameterSpec(ivBytes);
		
	Security.addProvider(new BouncyCastleProvider());
		
	FileInputStream Inputstream= new FileInputStream(o_Path2);//Inputstream 객체 생성
	FileOutputStream Outputstream= new FileOutputStream(dec_path);//Outputstream 객체 생성
	
	System.arraycopy(DerivedKey2, 0, password_check_out, 0, DerivedKey2.length);//password_check_out에 derivedKey값 복사
	System.arraycopy(salt2, 0, password_check_out, 16, salt2.length);//password_check_out에 salt값 복사
	MessageDigest hash= MessageDigest.getInstance("SHA1", "BC");
	password_check_out=hash.digest(password_check_out);
	System.arraycopy(password_check_out, 0, password_check, 0, 16);
	System.out.println("password_check: "+Utils.toHexString(password_check));//DerivedKey2와 salt를 이용해 password_check생성

	password_check_outd=Inputstream.readNBytes(24);//Inputstream에서 앞의 24바이트를 읽어옴
	for(int i=8;i<24;i++) {
		password_checkd[i-8]=password_check_outd[i];	//Inputstream의 password_check 부분만 password_checkd에 저장
	}
	System.out.println("password_checkd: "+Utils.toHexString(password_checkd));
	
	int sum=0;
	for(int i=0;i<16;i++) {
		if(password_check[i]==password_checkd[i]) {
			sum++;
		}
	}
	if(sum==16) {//password_check와 password_checkd가 일치하면 복호화진행
	
	Cipher cipher=null;
	cipher=Cipher.getInstance("AES/CBC/PKCS7Padding", "BC");
	cipher.init(Cipher.DECRYPT_MODE, key, iv);
	
	int BUF_SIZE=1024;
	byte[] buffer= new byte[BUF_SIZE];
	int read=BUF_SIZE;
	
	while((read=Inputstream.read(buffer,0,BUF_SIZE))==BUF_SIZE) {
		Outputstream.write(cipher.update(buffer,0,read));
	}
	Outputstream.write(cipher.doFinal(buffer,0,read));
	
	Inputstream.close();
	Outputstream.close();
	}
}
}
