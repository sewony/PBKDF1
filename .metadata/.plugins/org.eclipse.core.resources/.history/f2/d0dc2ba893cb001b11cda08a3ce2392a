import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.security.MessageDigest;
import java.security.Security;

import javax.crypto.Cipher;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;

import org.bouncycastle.jce.provider.BouncyCastleProvider;

public class Methods {

	static byte[] KeyGeneration(String password, byte[]salt, int dkLen, int iteration)throws Exception {
		
		Security.addProvider(new BouncyCastleProvider());
		MessageDigest md= MessageDigest.getInstance("SHA1","BC");
		byte[] input= new byte[password.length()+salt.length];
		
		System.arraycopy(Utils.toByteArray(password), 0, input, 0, password.length());
		System.arraycopy(salt, 0/*salt복사시작위치*/, input/*복사해서넣는곳*/, password.length()/*복사시작위치*/, salt.length/*이만큼복사*/);
		
		System.out.println("Input : "+Utils.toHexString(input));
		
		md.update(input);
		
		for(int i=0;i<iteration-1;i++) {
			byte T[]=md.digest();
			md.update(T);
		}
		byte output[]=md.digest();
		byte[] derivedKey=new byte[16];
		
		System.arraycopy(output, 0, derivedKey, 0, dkLen);
		
		System.out.println("derivedKey : "+Utils.toHexString(derivedKey));
		return derivedKey;
	}
	
	
	static void FileEnc(byte[] salt, byte[] DerivedKey, String Path, String o_Path)throws Exception{
	//Security.addProvider(new BouncyCastleProvider());
		System.out.println("check!");
		byte[]	ivBytes=new byte[] {
			0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00,
			0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00};
		
		SecretKeySpec key= new SecretKeySpec(DerivedKey, "AES");
		IvParameterSpec iv= new IvParameterSpec(ivBytes);
		
	Cipher cipher=null;
	cipher=Cipher.getInstance("AES/CBC/PKCS7Padding", "BC");
	cipher.init(Cipher.ENCRYPT_MODE, key, iv);//암호화 모드로 initialization 
	System.out.println("check!");
		byte[] password_check=new byte[16];
		byte[] password_check_out=new byte[24];
	
	System.arraycopy(DerivedKey, 0, password_check_out, 0, DerivedKey.length);//password_check_out에 derivedKey값 복사
	System.arraycopy(salt, 0, password_check_out, 16, salt.length);//password_check_out에 salt값 복사
	MessageDigest hash= MessageDigest.getInstance("SHA1", "BC");
	
	//password_check=hash.digest(DerivedKey);//SHA1 해시함수를 사용하여 password_check값 만듦.
	password_check_out=hash.digest(password_check_out);
	System.arraycopy(password_check_out, 0, password_check, 0, 16);
	System.out.println("password_check: "+Utils.toHexString(password_check));
	
	System.out.println("check!");
	FileInputStream Inputstream= new FileInputStream(Path);//Inputstream 객체생성
	FileOutputStream Outputstream= new FileOutputStream(o_Path);//Outputstream 객체생성
	/*
	Outputstream.write(salt);//salt를 Outputstream 객체에 넣는다.
	Outputstream.write(password_check);//password_check값을 Outputstream 객체에 넣는다.
	*/
		int BUF_SIZE=1024;
		byte[] buffer= new byte[BUF_SIZE];  
	
	//Outputstream("");
		int read=BUF_SIZE;
	
	while((read=Inputstream.read(buffer,0,BUF_SIZE))==BUF_SIZE) {
		Outputstream.write(cipher.update(buffer,0,read));
	}
	Outputstream.write(cipher.doFinal(buffer,0,read));
	
	Inputstream.close();
	Outputstream.close();
	  }

	static void FileDec(byte[] salt2, byte[] DerivedKey2, String Path2, String o_Path2) throws Exception, FileNotFoundException {
		Security.addProvider(new BouncyCastleProvider());
		
		MessageDigest hash= MessageDigest.getInstance("SHA1", "BC");
		System.arraycopy(salt2, 0, DerivedKey2, DerivedKey2.length, salt2.length);
		byte[] password_check2=hash.digest(DerivedKey2); //SHA1 해시함수를 사용하여 password_check값 만듦.
		
		FileOutputStream Outputstream= new FileOutputStream(o_Path2);//Outputstream 객체 생성
		FileInputStream Inputstream= new FileInputStream(Path2);//Inputstream 객체 생성
		byte[] password_check=new byte[16];
		
		Inputstream.read(password_check, 8, 16);//Inputstream으로부터 password_check값을 읽어옴. 쓰임새에 맞게 썼는지
		
		if(password_check.equals(password_check2)) {//password_check는 어디에서 
		//복호화진행
		byte[]		ivBytes=new byte[] {
			0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00,
			0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00};
		
		SecretKeySpec key = new SecretKeySpec(DerivedKey2, "AES");
		IvParameterSpec iv= new IvParameterSpec(ivBytes);
		
		Cipher cipher=null;
		cipher.init(Cipher.DECRYPT_MODE, key, iv);
		
		
		
		//password_check를 읽어옴 
		////////////
		
		Inputstream=new FileInputStream("enc");
		Outputstream=new FileOutputStream("");
		
		int BUF_SIZE=1024;
		int read=BUF_SIZE;
		byte[] buffer= new byte[BUF_SIZE]; 
		
		while((read=Inputstream.read(buffer,0,BUF_SIZE))==BUF_SIZE) {
			Outputstream.write(cipher.update(buffer,0,read));
		}
		Outputstream.write(cipher.doFinal(buffer,0,read));
		
		Inputstream.close();
		Outputstream.close();
	}
	}
}	
